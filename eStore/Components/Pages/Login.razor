@page "/login"
@using System.Security.Claims
@using DataAccessObjects.Define
@using eStore.DTO.MemberDTO.Request
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Authentication.Cookies
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Authentication.Cookies
@using Microsoft.AspNetCore.Components.Authorization
@using eStore.DTO.MemberDTO.Response
@using eStore.DTO.MemberDTO.Request
@using Services;
@using System.Security.Claims;
using DataAccessObjects.Define;
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
@inject IUnitOfWork UnitOfWork
@inject IConfiguration Configuration
<PageTitle>Login</PageTitle>

<EditForm method="post" Model="loginModel" OnValidSubmit="HandleLogin" FormName="LoginForm">
    <DataAnnotationsValidator/>
    <ValidationSummary/>
    <InputText @bind-Value="loginModel.Email" placeholder="Email"/>
    <InputText @bind-Value="loginModel.Password" placeholder="Mật khẩu" type="password"/>
    <button type="submit">Đăng nhập</button>
</EditForm>
<p>
    Chưa có tài khoản?
    <NavLink href="/register">Đăng ký ngay</NavLink>
</p>



@if (!string.IsNullOrEmpty(errorMessage))
{
    <p style="color:red">@errorMessage</p>
}
@if (!string.IsNullOrEmpty(successMessage))
{
    <p style="color:green">@successMessage</p>
}

@code {
    [CascadingParameter] private HttpContext? HttpContext { get; set; }

    [SupplyParameterFromForm] private LoginRequest loginModel { get; set; } = new();
    private string errorMessage = string.Empty;
    private string successMessage = string.Empty;

    private async Task HandleLogin()
    {
        errorMessage = string.Empty;
        successMessage = string.Empty;

        var adminEmail = Configuration["AdminAccount:Email"];
        var adminPassword = Configuration["AdminAccount:Password"];

        // Xử lý đăng nhập admin
        if (loginModel.Email == adminEmail && loginModel.Password == adminPassword)
        {
            var claims = new List<Claim>
            {
                new Claim(ClaimTypes.Email, adminEmail),
                new Claim(ClaimTypes.Name, adminEmail),
                new Claim(ClaimTypes.Role, "Admin")
            };

            var identity = new ClaimsIdentity(claims, CookieAuthenticationDefaults.AuthenticationScheme);
            var principal = new ClaimsPrincipal(identity);
            await HttpContext!.SignInAsync(principal);

            successMessage = "Đăng nhập thành công (Admin)!";
            NavigationManager.NavigateTo("/Members"); // hoặc /AdminDashboard nếu có
            return;
        }

        // Xử lý đăng nhập người dùng thường
        var member = UnitOfWork.Members.GetAll()
            .FirstOrDefault(m => m.Email == loginModel.Email && m.Password == loginModel.Password);

        if (member != null)
        {
            var claims = new List<Claim>
            {
                new Claim(ClaimTypes.Email, member.Email),
                new Claim(ClaimTypes.Name, member.Email),
                new Claim(ClaimTypes.Role, "User")
            };

            var identity = new ClaimsIdentity(claims, CookieAuthenticationDefaults.AuthenticationScheme);
            var principal = new ClaimsPrincipal(identity);
            await HttpContext!.SignInAsync(principal);

            successMessage = "Đăng nhập thành công!";
            NavigationManager.NavigateTo("/Products");
            return;
        }

        // Nếu không khớp gì cả
        errorMessage = "Email hoặc mật khẩu không đúng.";
    }

}
