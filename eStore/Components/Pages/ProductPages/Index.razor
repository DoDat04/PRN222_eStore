@page "/"
@page "/products"
@using Services.DTO
@inject Services.Define.IProductService ProductService

<PageTitle>Danh sách sản phẩm</PageTitle>

<h1>Danh sách sản phẩm</h1>

<p>
    <a href="products/create">Tạo mới</a>
</p>

@if (products == null)
{
    <p>Đang tải dữ liệu...</p>
}
else if (!products.Any())
{
    <p>Không có sản phẩm nào.</p>
}
else
{
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Loại</th>
                <th>Tên sản phẩm</th>
                <th>Khối lượng</th>
                <th>Giá</th>
                <th>Tồn kho</th>
                <th>Giảm giá</th>
                <th>Hành động</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var product in products)
            {
                <tr>
                    <td>@product.CategoryName</td>
                    <td>@product.ProductName</td>
                    <td>@product.Weight</td>
                    <td>@(product.UnitPrice.HasValue ? string.Format("{0:N0} VND", product.UnitPrice) : "")</td>
                    <td>@product.UnitsInStock</td>
                    <td>@($"{product.Discount * 100:0.##}%")</td>
                    <td>
                        <a href="@($"products/edit?productid={product.ProductId}")">Edit</a> |
                        <a href="@($"products/details?productid={product.ProductId}")">Details</a> |
                        <a href="@($"products/delete?productid={product.ProductId}")">Delete</a>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<ProductDto>? products;

    protected override async Task OnInitializedAsync()
    {
        var result = await ProductService.GetAllAsync();
        products = result.ToList();
    }
}
