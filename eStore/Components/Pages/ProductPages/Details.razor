@page "/products/details"
@using Services.DTO
@inject Services.Define.IProductService ProductService
@inject NavigationManager NavigationManager

<PageTitle>Chi tiết sản phẩm</PageTitle>

<h1>Chi tiết sản phẩm</h1>

<div>
    <h2>Thông tin sản phẩm</h2>
    <hr />
    @if (Product is null)
    {
        <p><em>Đang tải dữ liệu...</em></p>
    }
    else
    {
        <dl class="row">
            <dt class="col-sm-3">Loại sản phẩm</dt>
            <dd class="col-sm-9">@Product.CategoryName</dd>
            <dt class="col-sm-3">Tên sản phẩm</dt>
            <dd class="col-sm-9">@Product.ProductName</dd>
            <dt class="col-sm-3">Khối lượng</dt>
            <dd class="col-sm-9">@Product.Weight</dd>
            <dt class="col-sm-3">Giá</dt>
            <dd class="col-sm-9">@(Product.UnitPrice.HasValue ? string.Format("{0:N0} VND", Product.UnitPrice) : "")</dd>
            <dt class="col-sm-3">Tồn kho</dt>
            <dd class="col-sm-9">@Product.UnitsInStock</dd>
            <dt class="col-sm-3">Giảm giá</dt>
            <dd class="col-sm-9">@($"{Product.Discount * 100:0.##}%")</dd>

        </dl>
        <div>
            <a href="@($"/products/edit?productid={Product.ProductId}")">Chỉnh sửa</a> |
            <a href="/products">Quay lại danh sách</a>
        </div>
    }
</div>

@code {
    private ProductDto? Product;

    [SupplyParameterFromQuery]
    private int ProductId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Product = await ProductService.GetByIdAsync(ProductId);
        if (Product is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }
}
