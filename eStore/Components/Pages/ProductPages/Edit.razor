@page "/products/edit"
@using Services.DTO
@using Microsoft.EntityFrameworkCore
@using BusinessObjects
@using Services.Define;
@inject IDbContextFactory<BusinessObjects.EStoreContext> DbFactory
@inject IProductService ProductService
@inject ICategoryService CategoryService
@inject NavigationManager NavigationManager

<PageTitle>Edit</PageTitle>
<h1>Edit</h1>
<h2>Product</h2>
<hr />

@if (Product is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-4">
            <EditForm method="post" Model="Product" OnValidSubmit="UpdateProduct" FormName="edit" Enhance>
                <DataAnnotationsValidator />
                <input type="hidden" name="Product.ProductId" value="@Product.ProductId" />
                <div class="mb-3">
                    <label for="categoryid" class="form-label">Category:</label>
                    <InputSelect id="categoryid" @bind-Value="Product.CategoryId" class="form-control">
                        <option value="">-- Chọn loại sản phẩm --</option>
                        @foreach (var cat in Categories)
                        {
                            <option value="@cat.CategoryId">@cat.CategoryName</option>
                        }
                    </InputSelect>
                    <ValidationMessage For="() => Product.CategoryId" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="productname" class="form-label">ProductName:</label>
                    <InputText id="productname" @bind-Value="Product.ProductName" class="form-control" />
                    <ValidationMessage For="() => Product.ProductName" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="weight" class="form-label">Weight:</label>
                    <InputText id="weight" @bind-Value="Product.Weight" class="form-control" />
                    <ValidationMessage For="() => Product.Weight" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="unitprice" class="form-label">UnitPrice:</label>
                    <InputNumber id="unitprice" @bind-Value="Product.UnitPrice" class="form-control" />
                    <ValidationMessage For="() => Product.UnitPrice" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="unitsinstock" class="form-label">UnitsInStock:</label>
                    <InputNumber id="unitsinstock" @bind-Value="Product.UnitsInStock" class="form-control" />
                    <ValidationMessage For="() => Product.UnitsInStock" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="unitsinstock" class="form-label">Image Url:</label>
                    <InputText id="unitsinstock" @bind-Value="Product.ImageUrl" class="form-control" />
                    <ValidationMessage For="() => Product.UnitsInStock" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="unitsinstock" class="form-label">Discount:</label>
                    <InputNumber id="unitsinstock" @bind-Value="Product.Discount" class="form-control" required />
                    <ValidationMessage For="() => Product.Discount" class="text-danger" />
                </div>
                <button type="submit" class="btn btn-primary">Save</button>
            </EditForm>
        </div>
    </div>
}

<div>
    <a href="/products">Quay lại danh sách</a>
</div>

@code {
    [SupplyParameterFromQuery]
    private int ProductId { get; set; }

    private ProductDto? Product { get; set; } = new();

    private List<CategoryDto> Categories = new();

    protected override async Task OnInitializedAsync()
    {
        Categories = (await CategoryService.GetAllAsync()).ToList();
        Product = await ProductService.GetByIdAsync(ProductId);
        if (Product is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    private async Task UpdateProduct()
    {
        var result = await ProductService.UpdateAsync(Product!);
        if (!result)
        {
            NavigationManager.NavigateTo("notfound");
            return;
        }
        NavigationManager.NavigateTo("/products");
    }
}