@page "/register"
@using Services.DTO
@using Services.Define
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.Extensions.Logging
@inject IMemberService MemberService
@inject NavigationManager NavigationManager
@inject ILogger<Register> Logger
@rendermode InteractiveServer

<PageTitle>Register</PageTitle>

@if (!string.IsNullOrEmpty(ErrorMessage))
{
    <div class="alert alert-danger">@ErrorMessage</div>
}

<h3>Register</h3>
<hr />

<div class="row">
    <div class="col-md-4">
        <EditForm Model="Member" OnValidSubmit="HandleSubmit" FormName="RegisterForm">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="mb-3">
                <label for="email" class="form-label">Email:</label>
                <InputText id="email" class="form-control" @bind-Value="Member.Email" />
                <ValidationMessage For="@(() => Member.Email)" />
            </div>

            <div class="mb-3">
                <label for="companyname" class="form-label">Company Name:</label>
                <InputText id="companyname" class="form-control" @bind-Value="Member.CompanyName" />
                <ValidationMessage For="@(() => Member.CompanyName)" />
            </div>

            <div class="mb-3">
                <label for="city" class="form-label">City:</label>
                <InputText id="city" class="form-control" @bind-Value="Member.City" />
                <ValidationMessage For="@(() => Member.City)" />
            </div>

            <div class="mb-3">
                <label for="country" class="form-label">Country:</label>
                <InputText id="country" class="form-control" @bind-Value="Member.Country" />
                <ValidationMessage For="@(() => Member.Country)" />
            </div>

            <div class="mb-3">
                <label for="password" class="form-label">Password:</label>
                <InputText id="password" type="password" class="form-control" @bind-Value="Member.Password" />
                <ValidationMessage For="@(() => Member.Password)" />
            </div>

            <button type="submit" class="btn btn-primary" disabled="@isSubmitting">
                @if (isSubmitting)
                {
                    <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                    <text> Registering...</text>
                }
                else
                {
                    <text>Register</text>
                }
            </button>
        </EditForm>

        @if (ShowDebugInfo)
        {
            <div class="mt-3 text-muted">
                <strong>DEBUG:</strong> @Member.Email, @Member.CompanyName
            </div>
        }
    </div>
</div>

<div class="mt-3">
    <a href="/" class="btn btn-secondary">Back to Home</a>
</div>

@code {
    private MemberDto Member { get; set; } = new();

    private string? ErrorMessage;
    private bool isSubmitting = false;
    private bool ShowDebugInfo = false;

    private async Task HandleSubmit()
    {
        if (isSubmitting) return;

        try
        {
            isSubmitting = true;
            ErrorMessage = null;

            Logger.LogInformation("Registering Member: {Email}", Member.Email);

            await MemberService.AddAsync(Member);

            Logger.LogInformation("Member registered successfully: {Email}", Member.Email);
            NavigationManager.NavigateTo("/login"); // Optional: redirect to login page after register
        }
        catch (Exception ex)
        {
            ErrorMessage = "Failed to register: " + ex.Message;
            Logger.LogError(ex, "Registration failed for email: {Email}", Member.Email);
        }
        finally
        {
            isSubmitting = false;
        }
    }
}
